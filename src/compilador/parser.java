
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 13 13:30:58 ART 2017
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import rpn.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 13 13:30:58 ART 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\004\000" +
    "\002\006\003\000\002\007\005\000\002\010\007\000\002" +
    "\010\007\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\006\000\002" +
    "\014\006\000\002\014\006\000\002\014\003\000\002\014" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\016\005\000\002\016\004\000\002\016\003\000\002" +
    "\016\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\020\010\000\002\020\012" +
    "\000\002\021\010\000\002\017\004\000\002\017\003\000" +
    "\002\022\010\000\002\023\010\000\002\023\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\014\004\011\023\006\026\005\031\010\057" +
    "\012\001\002\000\012\023\006\026\005\031\010\057\012" +
    "\001\002\000\022\020\035\033\022\034\023\035\025\036" +
    "\033\054\037\055\027\057\032\001\002\000\022\020\035" +
    "\033\022\034\023\035\025\036\033\054\037\055\027\057" +
    "\032\001\002\000\020\002\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\030\uffd2\031\uffd2\057\uffd2\001\002\000\024\020\035\033" +
    "\022\034\023\035\025\036\033\054\037\055\027\056\130" +
    "\057\032\001\002\000\004\010\106\001\002\000\004\017" +
    "\021\001\002\000\004\002\020\001\002\000\014\002\uffff" +
    "\023\006\026\005\031\010\057\012\001\002\000\020\002" +
    "\uffdb\023\uffdb\024\uffdb\026\uffdb\030\uffdb\031\uffdb\057\uffdb" +
    "\001\002\000\020\002\uffdc\023\uffdc\024\uffdc\026\uffdc\030" +
    "\uffdc\031\uffdc\057\uffdc\001\002\000\020\002\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\030\uffd3\031\uffd3\057\uffd3\001\002\000" +
    "\004\002\001\001\002\000\022\020\035\033\022\034\023" +
    "\035\025\036\033\054\037\055\027\057\032\001\002\000" +
    "\004\020\067\001\002\000\004\020\064\001\002\000\056" +
    "\002\ufff2\013\050\014\ufff2\021\ufff2\023\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\037\ufff2\040\ufff2" +
    "\042\051\043\047\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\057\ufff2\001\002\000\004\020\061\001\002" +
    "\000\060\002\uffe6\013\uffe6\014\uffe6\021\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\037\uffe6" +
    "\040\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\057\uffe6\001\002\000\060" +
    "\002\ufffb\013\ufffb\014\ufffb\021\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\037\ufffb\040\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\051\ufffb\052\ufffb\057\ufffb\001\002\000\024\002\uffde" +
    "\023\uffde\024\uffde\026\uffde\030\uffde\031\uffde\037\044\040" +
    "\045\057\uffde\001\002\000\056\002\uffee\013\uffee\014\uffee" +
    "\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\037\uffee\040\uffee\042\uffee\043\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\057\uffee\001" +
    "\002\000\060\002\uffeb\013\uffeb\014\uffeb\021\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\057\uffeb\001\002\000" +
    "\004\020\056\001\002\000\060\002\uffea\013\uffea\014\uffea" +
    "\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\057" +
    "\uffea\001\002\000\022\020\035\033\022\034\023\035\025" +
    "\036\033\054\037\055\027\057\032\001\002\000\060\002" +
    "\uffec\013\uffec\014\uffec\021\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\037\uffec\040\uffec\042" +
    "\uffec\043\uffec\044\040\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\057\uffec\001\002\000\060\002\ufffc\013" +
    "\ufffc\014\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\037\ufffc\040\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\057\ufffc\001\002\000\022\020\035\033\022\034" +
    "\023\035\025\036\033\054\037\055\027\057\032\001\002" +
    "\000\056\002\uffed\013\uffed\014\uffed\021\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\037\uffed" +
    "\040\uffed\042\uffed\043\uffed\045\uffed\046\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\057\uffed\001\002\000\010\021\043" +
    "\037\044\040\045\001\002\000\060\002\uffe5\013\uffe5\014" +
    "\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\057\uffe5\001\002\000\022\020\035\033\022\034\023\035" +
    "\025\036\033\054\037\055\027\057\032\001\002\000\022" +
    "\020\035\033\022\034\023\035\025\036\033\054\037\055" +
    "\027\057\032\001\002\000\056\002\ufff3\013\050\014\ufff3" +
    "\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\037\ufff3\040\ufff3\042\051\043\047\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\057\ufff3\001" +
    "\002\000\022\020\035\033\022\034\023\035\025\036\033" +
    "\054\037\055\027\057\032\001\002\000\022\020\035\033" +
    "\022\034\023\035\025\036\033\054\037\055\027\057\032" +
    "\001\002\000\022\020\035\033\022\034\023\035\025\036" +
    "\033\054\037\055\027\057\032\001\002\000\056\002\ufff0" +
    "\013\ufff0\014\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\037\ufff0\040\ufff0\042\ufff0" +
    "\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052" +
    "\ufff0\057\ufff0\001\002\000\056\002\ufff1\013\ufff1\014\ufff1" +
    "\021\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\057\ufff1\001" +
    "\002\000\056\002\uffef\013\uffef\014\uffef\021\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\037" +
    "\uffef\040\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\057\uffef\001\002\000\056\002" +
    "\ufff4\013\050\014\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\037\ufff4\040\ufff4\042" +
    "\051\043\047\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\057\ufff4\001\002\000\022\020\035\033\022\034" +
    "\023\035\025\036\033\054\037\055\027\057\032\001\002" +
    "\000\010\021\060\037\044\040\045\001\002\000\060\002" +
    "\uffe7\013\uffe7\014\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\037\uffe7\040\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\057\uffe7\001\002\000\022\020\035\033" +
    "\022\034\023\035\025\036\033\054\037\055\027\057\032" +
    "\001\002\000\010\021\063\037\044\040\045\001\002\000" +
    "\060\002\uffe8\013\uffe8\014\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\037\uffe8\040" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\057\uffe8\001\002\000\022\020" +
    "\035\033\022\034\023\035\025\036\033\054\037\055\027" +
    "\057\032\001\002\000\010\021\066\037\044\040\045\001" +
    "\002\000\060\002\uffe9\013\uffe9\014\uffe9\021\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\037" +
    "\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\057\uffe9\001\002\000" +
    "\004\010\070\001\002\000\004\032\071\001\002\000\004" +
    "\020\102\001\002\000\006\011\073\014\074\001\002\000" +
    "\004\021\101\001\002\000\004\032\075\001\002\000\004" +
    "\020\076\001\002\000\022\020\035\033\022\034\023\035" +
    "\025\036\033\054\037\055\027\057\032\001\002\000\010" +
    "\021\100\037\044\040\045\001\002\000\006\011\uffd0\014" +
    "\uffd0\001\002\000\060\002\uffd1\013\uffd1\014\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\057\uffd1\001" +
    "\002\000\022\020\035\033\022\034\023\035\025\036\033" +
    "\054\037\055\027\057\032\001\002\000\010\021\104\037" +
    "\044\040\045\001\002\000\006\011\uffcf\014\uffcf\001\002" +
    "\000\006\005\ufff8\010\ufff8\001\002\000\004\057\112\001" +
    "\002\000\006\005\111\010\106\001\002\000\006\005\ufff9" +
    "\010\ufff9\001\002\000\012\023\ufffa\026\ufffa\031\ufffa\057" +
    "\ufffa\001\002\000\006\011\115\014\116\001\002\000\004" +
    "\011\114\001\002\000\006\005\ufff7\010\ufff7\001\002\000" +
    "\004\053\124\001\002\000\004\057\112\001\002\000\004" +
    "\014\120\001\002\000\006\006\121\007\123\001\002\000" +
    "\006\011\ufffe\014\ufffe\001\002\000\006\011\ufff5\014\ufff5" +
    "\001\002\000\006\011\ufffd\014\ufffd\001\002\000\004\010" +
    "\125\001\002\000\006\006\121\007\123\001\002\000\006" +
    "\011\ufff6\014\ufff6\001\002\000\022\002\uffdd\014\133\023" +
    "\uffdd\024\uffdd\026\uffdd\030\uffdd\031\uffdd\057\uffdd\001\002" +
    "\000\022\002\uffd8\014\uffd8\023\uffd8\024\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\057\uffd8\001\002\000\022\002\uffd9\014\uffd9" +
    "\023\uffd9\024\uffd9\026\uffd9\030\uffd9\031\uffd9\057\uffd9\001" +
    "\002\000\026\002\uffd7\014\uffd7\023\uffd7\024\uffd7\026\uffd7" +
    "\030\uffd7\031\uffd7\037\044\040\045\057\uffd7\001\002\000" +
    "\024\020\035\033\022\034\023\035\025\036\033\054\037" +
    "\055\027\056\130\057\032\001\002\000\022\002\uffda\014" +
    "\uffda\023\uffda\024\uffda\026\uffda\030\uffda\031\uffda\057\uffda" +
    "\001\002\000\004\025\153\001\002\000\022\037\044\040" +
    "\045\045\137\046\141\047\144\050\140\051\143\052\142" +
    "\001\002\000\022\020\035\033\022\034\023\035\025\036" +
    "\033\054\037\055\027\057\032\001\002\000\022\020\035" +
    "\033\022\034\023\035\025\036\033\054\037\055\027\057" +
    "\032\001\002\000\022\020\035\033\022\034\023\035\025" +
    "\036\033\054\037\055\027\057\032\001\002\000\022\020" +
    "\035\033\022\034\023\035\025\036\033\054\037\055\027" +
    "\057\032\001\002\000\022\020\035\033\022\034\023\035" +
    "\025\036\033\054\037\055\027\057\032\001\002\000\022" +
    "\020\035\033\022\034\023\035\025\036\033\054\037\055" +
    "\027\057\032\001\002\000\012\025\uffe4\027\uffe4\037\044" +
    "\040\045\001\002\000\012\025\uffe0\027\uffe0\037\044\040" +
    "\045\001\002\000\012\025\uffdf\027\uffdf\037\044\040\045" +
    "\001\002\000\012\025\uffe1\027\uffe1\037\044\040\045\001" +
    "\002\000\012\025\uffe2\027\uffe2\037\044\040\045\001\002" +
    "\000\012\025\uffe3\027\uffe3\037\044\040\045\001\002\000" +
    "\012\023\006\026\005\031\010\057\012\001\002\000\016" +
    "\023\006\024\155\026\005\030\156\031\010\057\012\001" +
    "\002\000\012\023\006\026\005\031\010\057\012\001\002" +
    "\000\004\023\157\001\002\000\020\002\uffd6\023\uffd6\024" +
    "\uffd6\026\uffd6\030\uffd6\031\uffd6\057\uffd6\001\002\000\014" +
    "\023\006\026\005\030\161\031\010\057\012\001\002\000" +
    "\004\023\162\001\002\000\020\002\uffd5\023\uffd5\024\uffd5" +
    "\026\uffd5\030\uffd5\031\uffd5\057\uffd5\001\002\000\004\027" +
    "\164\001\002\000\012\023\006\026\005\031\010\057\012" +
    "\001\002\000\014\023\006\026\005\030\166\031\010\057" +
    "\012\001\002\000\004\026\167\001\002\000\020\002\uffd4" +
    "\023\uffd4\024\uffd4\026\uffd4\030\uffd4\031\uffd4\057\uffd4\001" +
    "\002\000\014\002\000\023\006\026\005\031\010\057\012" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\016\002\012\005\003\016\006\017\013\020" +
    "\015\021\014\001\001\000\012\016\006\017\167\020\015" +
    "\021\014\001\001\000\020\004\033\011\135\012\023\013" +
    "\030\014\035\015\162\022\025\001\001\000\020\004\033" +
    "\011\135\012\023\013\030\014\035\015\134\022\025\001" +
    "\001\000\002\001\001\000\022\004\033\011\131\012\023" +
    "\013\030\014\035\022\025\025\126\026\130\001\001\000" +
    "\006\006\106\007\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\016\020\015\021\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\033\011\027\012\023\013\030\014" +
    "\035\022\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\033\011\041\012\023\013\030\014\035\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\033\013" +
    "\040\014\035\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\033\012\054\013" +
    "\030\014\035\022\025\001\001\000\014\004\033\012\045" +
    "\013\030\014\035\022\025\001\001\000\002\001\001\000" +
    "\012\004\033\013\053\014\035\022\025\001\001\000\012" +
    "\004\033\013\052\014\035\022\025\001\001\000\012\004" +
    "\033\013\051\014\035\022\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\033\011\056\012\023\013\030\014\035\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\033\011\061\012\023\013\030\014\035\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\033\011" +
    "\064\012\023\013\030\014\035\022\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\033\011\076\012\023\013\030\014\035\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\033\011\102\012\023\013\030\014\035\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\112\001\001\000\004\007\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\116\001\001\000\002\001\001\000\004\003\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\033\011\131\012\023\013" +
    "\030\014\035\022\025\026\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\033\011" +
    "\151\012\023\013\030\014\035\022\025\001\001\000\016" +
    "\004\033\011\150\012\023\013\030\014\035\022\025\001" +
    "\001\000\016\004\033\011\147\012\023\013\030\014\035" +
    "\022\025\001\001\000\016\004\033\011\146\012\023\013" +
    "\030\014\035\022\025\001\001\000\016\004\033\011\145" +
    "\012\023\013\030\014\035\022\025\001\001\000\016\004" +
    "\033\011\144\012\023\013\030\014\035\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\006\017\153\020\015\021\014\001\001\000\010\016" +
    "\016\020\015\021\014\001\001\000\012\016\006\017\157" +
    "\020\015\021\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\016\020\015\021\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\006\017\164\020\015\021\014\001\001\000\010\016\016" +
    "\020\015\021\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\016\020\015\021\014\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
  public void handleDeclaration(LinkedList<SymbolTableEntry> dec2) throws Exception {
  	for (SymbolTableEntry entry : dec2) {
      if (symbolTable.containsKey(entry.getName())) {
        throw new Exception("Multiple declaration of " + entry.getName());
      }
      symbolTable.put(entry.getName(), entry);
  	}
  }
  public SymbolTableEntry.TypeName getVariableType(String varName) {
  	return symbolTable.get(varName).getType();
  }
  public SymbolTableEntry.TypeName getExpressionType(LinkedList<rpn.Node> l) {
  	LinkedList<SymbolTableEntry.TypeName> typeStack = new LinkedList<>();
  	for (rpn.Node i : l) {
  		if (i instanceof rpn.VariableExpression) {
  			rpn.VariableExpression vex = (rpn.VariableExpression) i;
  			typeStack.push(getVariableType(vex.getName()));
  		}
  		else if (i instanceof rpn.LiteralExpression) {
  			rpn.LiteralExpression lex = (rpn.LiteralExpression) i;
  			if (lex.getLiteral() instanceof Float)
  				typeStack.push(SymbolTableEntry.TypeName.FLOAT);
  			else if (lex.getLiteral() instanceof Integer)
  				typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  		}
  		else if (i instanceof rpn.Operation) {
  			rpn.Operation op = (rpn.Operation) i;
  			switch (op) {
  			case PLUS:
  			case MINUS:
  			case DIV:
  			case MULT:
  			case POW: {
  				SymbolTableEntry.TypeName a = typeStack.pop();
  				SymbolTableEntry.TypeName b = typeStack.pop();
  				if (a == SymbolTableEntry.TypeName.FLOAT || b == SymbolTableEntry.TypeName.FLOAT)
  					typeStack.push(SymbolTableEntry.TypeName.FLOAT);
  				else
  					typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  				break;
  			}
  			case MOD:
  				typeStack.pop();
  				typeStack.pop();
  				typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  				break;
  			case TRUNC:
  				typeStack.pop();
  				typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  				break;
  			case SQRT:
  			case SIN:
  			case COS:
  				typeStack.pop();
  				typeStack.push(SymbolTableEntry.TypeName.FLOAT);
  				break;
  			}
  		}
  	}
  	return typeStack.pop();
  }
  
  public HashMap<String, SymbolTableEntry> symbolTable = new HashMap<>();
  public HashSet<Integer> integerTable = new HashSet<>();
  public HashSet<Float> floatTable = new HashSet<>();
  public HashSet<String> stringTable = new HashSet<>();
  public int counter = 0;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // argument_list ::= TRUNC LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> expr = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	                                                                 expr.add(rpn.Operation.TRUNC);
	                                                                 RESULT = expr;
	                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // argument_list ::= argument_list COMMA TRUNC LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int truncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int truncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<rpn.Node> trunc = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> expr = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	                                                                 trunc.addAll(expr);
	                                                                 trunc.add(rpn.Operation.TRUNC);
	                                                                 trunc.add(rpn.Operation.PLUS);
	                                                                 RESULT = trunc;
	                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_call ::= PLUSTRUNC LPAREN LBRACK argument_list RBRACK RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int plustruncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plustruncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> plustrunc = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = plustrunc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement_list ::= statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement_list ::= statement_list statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 st1.addAll(st2); RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // while_statement ::= WHILE condition DO statement_list END WHILE 
            {
              LinkedList<rpn.Node> RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<rpn.Node> cond = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int branchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int branchright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> branch = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	                                                           int x = parser.counter++;
	                                                           int y = parser.counter++;
	                                                           rpn.Node jumpToBegin = new rpn.LabelReference(x);
                                                               rpn.Node jumpToEnd = new rpn.LabelReference(y);
                                                               rpn.Node beginDest = new rpn.LabelDeclaration(x);
                                                               rpn.Node endDest = new rpn.LabelDeclaration(y);
                                                               
                                                               cond.addFirst(beginDest);
                                                               cond.addLast(jumpToEnd);
                                                               cond.addAll(branch);
                                                               cond.addLast(rpn.Control.JMP);
                                                               cond.addLast(jumpToBegin);
                                                               cond.addLast(endDest);

	                                                           RESULT = cond;
	                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // if_statement ::= IF condition THEN statement_list ELSE statement_list END IF 
            {
              LinkedList<rpn.Node> RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<rpn.Node> cond = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int branchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int branchright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<rpn.Node> branch = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> els = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	                                                                                 int x = parser.counter++;
	                                                                                 int y = parser.counter++;
	                                                                                 rpn.Node jumpToElse = new rpn.LabelReference(x);
	                                                                                 rpn.Node jumpToEnd = new rpn.LabelReference(y);
	                                                                                 rpn.Node elseDest = new rpn.LabelDeclaration(x);
	                                                                                 rpn.Node endDest = new rpn.LabelDeclaration(y);
	                                                                                 
	                                                                                 cond.addLast(jumpToElse);
	                                                                                 cond.addAll(branch);
	                                                                                 cond.addLast(rpn.Control.JMP);
	                                                                                 cond.addLast(jumpToEnd);
	                                                                                 cond.addLast(elseDest);
	                                                                                 cond.addAll(els);
	                                                                                 cond.addLast(endDest);
	                                                                                 
	                                                                                 RESULT = cond;
	                                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if_statement ::= IF condition THEN statement_list END IF 
            {
              LinkedList<rpn.Node> RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<rpn.Node> cond = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int branchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int branchright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> branch = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	                                                                                 int x = parser.counter++;
	                                                                                 rpn.Node jumpLocation = new rpn.LabelReference(x);
	                                                                                 rpn.Node jumpDest = new rpn.LabelDeclaration(x);
	                                                                                 cond.addLast(jumpLocation);
	                                                                                 cond.addAll(branch);
	                                                                                 cond.addLast(jumpDest);
	                                                                                 RESULT = cond;
	                                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // print_item ::= expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> exp = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          SymbolTableEntry.TypeName tn = parser.getExpressionType(exp);
	                                          if (tn == SymbolTableEntry.TypeName.INTEGER) {
	                                          	exp.addLast(rpn.Operation.PRINTINT);
	                                          }
	                                          else if (tn == SymbolTableEntry.TypeName.FLOAT) {
	                                            exp.addLast(rpn.Operation.PRINTFLOAT);
	                                          }
	                                          RESULT = exp;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_item",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // print_item ::= STRING_LITERAL 
            {
              LinkedList<rpn.Node> RESULT =null;
		int slitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String slit = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          parser.stringTable.add(slit);
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(new rpn.LiteralExpression(slit));
	                                          e1.addLast(rpn.Operation.PRINTSTR);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_item",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // print_list ::= print_item 
            {
              LinkedList<rpn.Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> i = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // print_list ::= print_list COMMA print_item 
            {
              LinkedList<rpn.Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> l = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> i = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addAll(i); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= while_statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= if_statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= PRINT print_list 
            {
              LinkedList<rpn.Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> l = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addLast(rpn.Operation.PRINTLF); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= IDENTIFIER ASSIGN expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> exp = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          exp.add(rpn.Operation.ASSIGN);
	                                          exp.add(new rpn.VariableExpression(ident));
	                                          RESULT = exp;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= expression NOTEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.EQEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition ::= expression EQEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.NEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= expression GT expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.LTEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= expression GTEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.LT);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= expression LT expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.addLast(rpn.Operation.CMP);
	                                          e1.addLast(rpn.Control.GTEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= expression LTEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.addLast(rpn.Operation.CMP);
	                                          e1.addLast(rpn.Control.GT);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // basexp ::= LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // basexp ::= function_call 
            {
              LinkedList<rpn.Node> RESULT =null;
		int plustruncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plustruncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> plustrunc = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = plustrunc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // basexp ::= SQRT LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 e1.addLast(rpn.Operation.SQRT); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // basexp ::= COS LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 e1.addLast(rpn.Operation.COS); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // basexp ::= SIN LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 e1.addLast(rpn.Operation.SIN); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // basexp ::= literal 
            {
              LinkedList<rpn.Node> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		rpn.LiteralExpression lit = (rpn.LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(lit);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // basexp ::= IDENTIFIER 
            {
              LinkedList<rpn.Node> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(new rpn.VariableExpression(ident));
	                                          if (!parser.symbolTable.containsKey(ident)) {
                                                throw new Exception(ident + " not declared");
                                              }
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basexp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= basexp 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= basexp POW factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 e1.addAll(e2); e1.add(rpn.Operation.POW); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= term MOD factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 e1.addAll(e2); e1.add(rpn.Operation.MOD); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= term DIV factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 e1.addAll(e2); e1.add(rpn.Operation.DIV); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= term MULT factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 e1.addAll(e2); e1.add(rpn.Operation.MULT); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= term 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression MINUS term 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.MINUS);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression PLUS term 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.PLUS);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration_inner ::= IDENTIFIER COMMA type_declaration_inner COMMA type_name 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nextdecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nextdecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<SymbolTableEntry> nextdec = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolTableEntry.TypeName type = (SymbolTableEntry.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                                                nextdec.addLast(new SymbolTableEntry(ident, type));
	                                                                                RESULT = nextdec;
	                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_inner",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration_inner ::= IDENTIFIER RBRACK EQ LBRACK type_name 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolTableEntry.TypeName type = (SymbolTableEntry.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                                                LinkedList<SymbolTableEntry> e1 = new LinkedList<>();
	                                                                                e1.addLast(new SymbolTableEntry(ident, type));
	                                                                                RESULT = e1;
	                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_inner",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration_outer ::= LBRACK type_declaration_inner RBRACK 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	                                                     Iterator<SymbolTableEntry> rit = dec1.descendingIterator();
	                                                     Iterator<SymbolTableEntry> fit = dec1.iterator();
	                                                     while (fit.hasNext()) {
	                                                       SymbolTableEntry e1 = fit.next();
	                                                       SymbolTableEntry e2 = rit.next();
	                                                       SymbolTableEntry.TypeName tn = e1.getType();
	                                                       e1.setType(e2.getType());
	                                                       e2.setType(tn);
	                                                     }
	                                                     RESULT = dec1;
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_outer",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_list ::= type_declaration_outer 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.handleDeclaration(dec1);
	                                                     RESULT = dec1;
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= declaration_list type_declaration_outer 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<SymbolTableEntry> dec2 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.handleDeclaration(dec2);
	                                                     dec1.addAll(dec2);
	                                                     RESULT = dec1;
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_block ::= DECVAR declaration_list ENDVAR 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dec1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= FLOATING_POINT_LITERAL 
            {
              rpn.LiteralExpression RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Float lit = (java.lang.Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.floatTable.add(lit);
	                                                     RESULT = new rpn.LiteralExpression(lit);
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= INTEGER_LITERAL 
            {
              rpn.LiteralExpression RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer lit = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.integerTable.add(lit);
	                                                     RESULT = new rpn.LiteralExpression(lit);
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_name ::= FLOAT 
            {
              SymbolTableEntry.TypeName RESULT =null;
		 RESULT = SymbolTableEntry.TypeName.FLOAT;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_name ::= INTEGER 
            {
              SymbolTableEntry.TypeName RESULT =null;
		 RESULT = SymbolTableEntry.TypeName.INTEGER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // goal ::= statement_list 
            {
              LinkedList<rpn.Node> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= declaration_block statement_list 
            {
              LinkedList<rpn.Node> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> start_val = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

