
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 12 11:27:25 ART 2017
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import rpn.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 12 11:27:25 ART 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\004\000" +
    "\002\006\003\000\002\007\005\000\002\010\007\000\002" +
    "\010\007\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\003" +
    "\000\002\015\003\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\017\010\000\002" +
    "\017\012\000\002\020\010\000\002\016\004\000\002\016" +
    "\003\000\002\021\010\000\002\022\010\000\002\022\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\014\004\010\023\006\026\005\031\011\056" +
    "\012\001\002\000\012\023\006\026\005\031\011\056\012" +
    "\001\002\000\014\020\032\033\022\053\033\054\024\056" +
    "\030\001\002\000\014\020\032\033\022\053\033\054\024" +
    "\056\030\001\002\000\020\002\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\056\uffd8\001\002\000\004\010\073" +
    "\001\002\000\016\020\032\033\022\053\033\054\024\055" +
    "\065\056\030\001\002\000\004\017\021\001\002\000\004" +
    "\002\020\001\002\000\014\002\uffff\023\006\026\005\031" +
    "\011\056\012\001\002\000\020\002\uffe1\023\uffe1\024\uffe1" +
    "\026\uffe1\030\uffe1\031\uffe1\056\uffe1\001\002\000\020\002" +
    "\uffe2\023\uffe2\024\uffe2\026\uffe2\030\uffe2\031\uffe2\056\uffe2" +
    "\001\002\000\020\002\uffd9\023\uffd9\024\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\056\uffd9\001\002\000\004\002\001\001\002" +
    "\000\014\020\032\033\022\053\033\054\024\056\030\001" +
    "\002\000\004\020\046\001\002\000\054\002\ufff2\013\041" +
    "\014\ufff2\021\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\034\ufff2\035\ufff2\040\042\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\056\ufff2\001" +
    "\002\000\054\002\ufffb\013\ufffb\014\ufffb\021\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\034" +
    "\ufffb\035\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\046\ufffb\047\ufffb\056\ufffb\001\002\000\054\002\uffec\013" +
    "\uffec\014\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\034\uffec\035\uffec\040\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\056\uffec" +
    "\001\002\000\024\002\uffe4\023\uffe4\024\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\034\036\035\037\056\uffe4\001\002\000\054" +
    "\002\uffef\013\uffef\014\uffef\021\uffef\023\uffef\024\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\034\uffef\035\uffef" +
    "\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\056\uffef\001\002\000\054\002\uffee\013\uffee\014\uffee" +
    "\021\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\034\uffee\035\uffee\040\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\056\uffee\001\002\000" +
    "\054\002\uffed\013\uffed\014\uffed\021\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\034\uffed\035" +
    "\uffed\040\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed" +
    "\047\uffed\056\uffed\001\002\000\014\020\032\033\022\053" +
    "\033\054\024\056\030\001\002\000\054\002\ufffc\013\ufffc" +
    "\014\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027" +
    "\ufffc\030\ufffc\031\ufffc\034\ufffc\035\ufffc\040\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\056\ufffc\001" +
    "\002\000\010\021\035\034\036\035\037\001\002\000\054" +
    "\002\uffeb\013\uffeb\014\uffeb\021\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\035\uffeb" +
    "\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\056\uffeb\001\002\000\014\020\032\033\022\053\033" +
    "\054\024\056\030\001\002\000\014\020\032\033\022\053" +
    "\033\054\024\056\030\001\002\000\054\002\ufff3\013\041" +
    "\014\ufff3\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\034\ufff3\035\ufff3\040\042\042\ufff3" +
    "\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\056\ufff3\001" +
    "\002\000\014\020\032\033\022\053\033\054\024\056\030" +
    "\001\002\000\014\020\032\033\022\053\033\054\024\056" +
    "\030\001\002\000\054\002\ufff0\013\ufff0\014\ufff0\021\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\034\ufff0\035\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\056\ufff0\001\002\000\054\002" +
    "\ufff1\013\ufff1\014\ufff1\021\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\034\ufff1\035\ufff1\040" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\056\ufff1\001\002\000\054\002\ufff4\013\041\014\ufff4\021" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4" +
    "\031\ufff4\034\ufff4\035\ufff4\040\042\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\056\ufff4\001\002\000\004" +
    "\010\047\001\002\000\004\032\050\001\002\000\004\020" +
    "\061\001\002\000\006\011\052\014\053\001\002\000\004" +
    "\021\060\001\002\000\004\032\054\001\002\000\004\020" +
    "\055\001\002\000\014\020\032\033\022\053\033\054\024" +
    "\056\030\001\002\000\010\021\057\034\036\035\037\001" +
    "\002\000\006\011\uffd6\014\uffd6\001\002\000\054\002\uffd7" +
    "\013\uffd7\014\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\034\uffd7\035\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\056" +
    "\uffd7\001\002\000\014\020\032\033\022\053\033\054\024" +
    "\056\030\001\002\000\010\021\063\034\036\035\037\001" +
    "\002\000\006\011\uffd5\014\uffd5\001\002\000\022\002\uffe3" +
    "\014\070\023\uffe3\024\uffe3\026\uffe3\030\uffe3\031\uffe3\056" +
    "\uffe3\001\002\000\022\002\uffde\014\uffde\023\uffde\024\uffde" +
    "\026\uffde\030\uffde\031\uffde\056\uffde\001\002\000\022\002" +
    "\uffdf\014\uffdf\023\uffdf\024\uffdf\026\uffdf\030\uffdf\031\uffdf" +
    "\056\uffdf\001\002\000\026\002\uffdd\014\uffdd\023\uffdd\024" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\034\036\035\037\056\uffdd" +
    "\001\002\000\016\020\032\033\022\053\033\054\024\055" +
    "\065\056\030\001\002\000\022\002\uffe0\014\uffe0\023\uffe0" +
    "\024\uffe0\026\uffe0\030\uffe0\031\uffe0\056\uffe0\001\002\000" +
    "\006\005\ufff8\010\ufff8\001\002\000\004\056\077\001\002" +
    "\000\006\005\076\010\073\001\002\000\006\005\ufff9\010" +
    "\ufff9\001\002\000\012\023\ufffa\026\ufffa\031\ufffa\056\ufffa" +
    "\001\002\000\006\011\102\014\103\001\002\000\004\011" +
    "\101\001\002\000\006\005\ufff7\010\ufff7\001\002\000\004" +
    "\050\111\001\002\000\004\056\077\001\002\000\004\014" +
    "\105\001\002\000\006\006\106\007\110\001\002\000\006" +
    "\011\ufffe\014\ufffe\001\002\000\006\011\ufff5\014\ufff5\001" +
    "\002\000\006\011\ufffd\014\ufffd\001\002\000\004\010\112" +
    "\001\002\000\006\006\106\007\110\001\002\000\006\011" +
    "\ufff6\014\ufff6\001\002\000\004\025\132\001\002\000\022" +
    "\034\036\035\037\042\116\043\120\044\122\045\117\046" +
    "\123\047\121\001\002\000\014\020\032\033\022\053\033" +
    "\054\024\056\030\001\002\000\014\020\032\033\022\053" +
    "\033\054\024\056\030\001\002\000\014\020\032\033\022" +
    "\053\033\054\024\056\030\001\002\000\014\020\032\033" +
    "\022\053\033\054\024\056\030\001\002\000\014\020\032" +
    "\033\022\053\033\054\024\056\030\001\002\000\014\020" +
    "\032\033\022\053\033\054\024\056\030\001\002\000\012" +
    "\025\uffe6\027\uffe6\034\036\035\037\001\002\000\012\025" +
    "\uffea\027\uffea\034\036\035\037\001\002\000\012\025\uffe5" +
    "\027\uffe5\034\036\035\037\001\002\000\012\025\uffe7\027" +
    "\uffe7\034\036\035\037\001\002\000\012\025\uffe8\027\uffe8" +
    "\034\036\035\037\001\002\000\012\025\uffe9\027\uffe9\034" +
    "\036\035\037\001\002\000\012\023\006\026\005\031\011" +
    "\056\012\001\002\000\016\023\006\024\134\026\005\030" +
    "\135\031\011\056\012\001\002\000\012\023\006\026\005" +
    "\031\011\056\012\001\002\000\004\023\136\001\002\000" +
    "\020\002\uffdc\023\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc" +
    "\056\uffdc\001\002\000\014\023\006\026\005\030\140\031" +
    "\011\056\012\001\002\000\004\023\141\001\002\000\020" +
    "\002\uffdb\023\uffdb\024\uffdb\026\uffdb\030\uffdb\031\uffdb\056" +
    "\uffdb\001\002\000\004\027\143\001\002\000\012\023\006" +
    "\026\005\031\011\056\012\001\002\000\014\023\006\026" +
    "\005\030\145\031\011\056\012\001\002\000\004\026\146" +
    "\001\002\000\020\002\uffda\023\uffda\024\uffda\026\uffda\030" +
    "\uffda\031\uffda\056\uffda\001\002\000\014\002\000\023\006" +
    "\026\005\031\011\056\012\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\016\002\012\005\003\015\006\016\013\017" +
    "\015\020\014\001\001\000\012\015\006\016\146\017\015" +
    "\020\014\001\001\000\016\004\030\011\114\012\022\013" +
    "\026\014\141\021\024\001\001\000\016\004\030\011\114" +
    "\012\022\013\026\014\113\021\024\001\001\000\002\001" +
    "\001\000\006\006\073\007\071\001\001\000\020\004\030" +
    "\011\066\012\022\013\026\021\024\024\063\025\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\016" +
    "\017\015\020\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\030" +
    "\011\025\012\022\013\026\021\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\030\011\033\012\022\013\026" +
    "\021\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\030\012\044\013\026\021\024" +
    "\001\001\000\012\004\030\012\037\013\026\021\024\001" +
    "\001\000\002\001\001\000\010\004\030\013\043\021\024" +
    "\001\001\000\010\004\030\013\042\021\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\030\011\055\012\022\013\026\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\030\011\061\012\022\013\026\021" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\030\011\066\012\022\013\026\021\024" +
    "\025\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\077\001\001\000\004\007\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\103" +
    "\001\001\000\002\001\001\000\004\003\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\030\011\130" +
    "\012\022\013\026\021\024\001\001\000\014\004\030\011" +
    "\127\012\022\013\026\021\024\001\001\000\014\004\030" +
    "\011\126\012\022\013\026\021\024\001\001\000\014\004" +
    "\030\011\125\012\022\013\026\021\024\001\001\000\014" +
    "\004\030\011\124\012\022\013\026\021\024\001\001\000" +
    "\014\004\030\011\123\012\022\013\026\021\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\006\016\132\017\015\020\014\001\001\000\010\015" +
    "\016\017\015\020\014\001\001\000\012\015\006\016\136" +
    "\017\015\020\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\016\017\015\020\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\006\016\143\017\015\020\014\001\001\000\010\015\016" +
    "\017\015\020\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\016\017\015\020\014\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
  public void handleDeclaration(LinkedList<SymbolTableEntry> dec2) throws Exception {
  	for (SymbolTableEntry entry : dec2) {
      if (symbolTable.containsKey(entry.getName())) {
        throw new Exception("Multiple declaration of " + entry.getName());
      }
      symbolTable.put(entry.getName(), entry);
  	}
  }
  public SymbolTableEntry.TypeName getVariableType(String varName) {
  	return symbolTable.get(varName).getType();
  }
  public SymbolTableEntry.TypeName getExpressionType(LinkedList<rpn.Node> l) {
  	LinkedList<SymbolTableEntry.TypeName> typeStack = new LinkedList<>();
  	for (rpn.Node i : l) {
  		if (i instanceof rpn.VariableExpression) {
  			rpn.VariableExpression vex = (rpn.VariableExpression) i;
  			typeStack.push(getVariableType(vex.getName()));
  		}
  		else if (i instanceof rpn.LiteralExpression) {
  			rpn.LiteralExpression lex = (rpn.LiteralExpression) i;
  			if (lex.getLiteral() instanceof Float)
  				typeStack.push(SymbolTableEntry.TypeName.FLOAT);
  			else if (lex.getLiteral() instanceof Integer)
  				typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  		}
  		else if (i instanceof rpn.Operation) {
  			rpn.Operation op = (rpn.Operation) i;
  			switch (op) {
  			case PLUS:
  			case MINUS:
  			case DIV:
  			case MULT: {
  				SymbolTableEntry.TypeName a = typeStack.pop();
  				SymbolTableEntry.TypeName b = typeStack.pop();
  				if (a == SymbolTableEntry.TypeName.FLOAT || b == SymbolTableEntry.TypeName.FLOAT)
  					typeStack.push(SymbolTableEntry.TypeName.FLOAT);
  				else
  					typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  				break;
  			}
  			case TRUNC: {
  				typeStack.pop();
  				typeStack.push(SymbolTableEntry.TypeName.INTEGER);
  				break;
  			}
  			}
  		}
  	}
  	return typeStack.pop();
  }
  
  public HashMap<String, SymbolTableEntry> symbolTable = new HashMap<>();
  public HashSet<Integer> integerTable = new HashSet<>();
  public HashSet<Float> floatTable = new HashSet<>();
  public HashSet<String> stringTable = new HashSet<>();
  public int counter = 0;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // argument_list ::= TRUNC LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> expr = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	                                                                 expr.add(rpn.Operation.TRUNC);
	                                                                 RESULT = expr;
	                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // argument_list ::= argument_list COMMA TRUNC LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int truncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int truncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<rpn.Node> trunc = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> expr = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	                                                                 trunc.addAll(expr);
	                                                                 trunc.add(rpn.Operation.TRUNC);
	                                                                 trunc.add(rpn.Operation.PLUS);
	                                                                 RESULT = trunc;
	                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_call ::= PLUSTRUNC LPAREN LBRACK argument_list RBRACK RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int plustruncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plustruncright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> plustrunc = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = plustrunc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_list ::= statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_list ::= statement_list statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 st1.addAll(st2); RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_statement ::= WHILE condition DO statement_list END WHILE 
            {
              LinkedList<rpn.Node> RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<rpn.Node> cond = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int branchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int branchright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> branch = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	                                                           int x = parser.counter++;
	                                                           int y = parser.counter++;
	                                                           rpn.Node jumpToBegin = new rpn.LabelReference(x);
                                                               rpn.Node jumpToEnd = new rpn.LabelReference(y);
                                                               rpn.Node beginDest = new rpn.LabelDeclaration(x);
                                                               rpn.Node endDest = new rpn.LabelDeclaration(y);
                                                               
                                                               cond.addFirst(beginDest);
                                                               cond.addLast(jumpToEnd);
                                                               cond.addAll(branch);
                                                               cond.addLast(rpn.Control.JMP);
                                                               cond.addLast(jumpToBegin);
                                                               cond.addLast(endDest);

	                                                           RESULT = cond;
	                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_statement ::= IF condition THEN statement_list ELSE statement_list END IF 
            {
              LinkedList<rpn.Node> RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<rpn.Node> cond = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int branchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int branchright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<rpn.Node> branch = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> els = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	                                                                                 int x = parser.counter++;
	                                                                                 int y = parser.counter++;
	                                                                                 rpn.Node jumpToElse = new rpn.LabelReference(x);
	                                                                                 rpn.Node jumpToEnd = new rpn.LabelReference(y);
	                                                                                 rpn.Node elseDest = new rpn.LabelDeclaration(x);
	                                                                                 rpn.Node endDest = new rpn.LabelDeclaration(y);
	                                                                                 
	                                                                                 cond.addLast(jumpToElse);
	                                                                                 cond.addAll(branch);
	                                                                                 cond.addLast(rpn.Control.JMP);
	                                                                                 cond.addLast(jumpToEnd);
	                                                                                 cond.addLast(elseDest);
	                                                                                 cond.addAll(els);
	                                                                                 cond.addLast(endDest);
	                                                                                 
	                                                                                 RESULT = cond;
	                                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if_statement ::= IF condition THEN statement_list END IF 
            {
              LinkedList<rpn.Node> RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<rpn.Node> cond = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int branchleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int branchright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> branch = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	                                                                                 int x = parser.counter++;
	                                                                                 rpn.Node jumpLocation = new rpn.LabelReference(x);
	                                                                                 rpn.Node jumpDest = new rpn.LabelDeclaration(x);
	                                                                                 cond.addLast(jumpLocation);
	                                                                                 cond.addAll(branch);
	                                                                                 cond.addLast(jumpDest);
	                                                                                 RESULT = cond;
	                                                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // print_item ::= expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> exp = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          SymbolTableEntry.TypeName tn = parser.getExpressionType(exp);
	                                          if (tn == SymbolTableEntry.TypeName.INTEGER) {
	                                          	exp.addLast(rpn.Operation.PRINTINT);
	                                          }
	                                          else if (tn == SymbolTableEntry.TypeName.FLOAT) {
	                                            exp.addLast(rpn.Operation.PRINTFLOAT);
	                                          }
	                                          RESULT = exp;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_item",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // print_item ::= STRING_LITERAL 
            {
              LinkedList<rpn.Node> RESULT =null;
		int slitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String slit = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          parser.stringTable.add(slit);
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(new rpn.LiteralExpression(slit));
	                                          e1.addLast(rpn.Operation.PRINTSTR);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_item",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // print_list ::= print_item 
            {
              LinkedList<rpn.Node> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> i = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // print_list ::= print_list COMMA print_item 
            {
              LinkedList<rpn.Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> l = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> i = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addAll(i); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= while_statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= if_statement 
            {
              LinkedList<rpn.Node> RESULT =null;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= PRINT print_list 
            {
              LinkedList<rpn.Node> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> l = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addLast(rpn.Operation.PRINTLF); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= IDENTIFIER ASSIGN expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> exp = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          exp.add(rpn.Operation.ASSIGN);
	                                          exp.add(new rpn.VariableExpression(ident));
	                                          RESULT = exp;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= expression NOTEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.EQEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= expression EQEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.NEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= expression GT expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.LTEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= expression GTEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.CMP);
	                                          e1.add(rpn.Control.LT);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition ::= expression LT expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.addLast(rpn.Operation.CMP);
	                                          e1.addLast(rpn.Control.GTEQ);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condition ::= expression LTEQ expression 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.addLast(rpn.Operation.CMP);
	                                          e1.addLast(rpn.Control.GT);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= LPAREN expression RPAREN 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= function_call 
            {
              LinkedList<rpn.Node> RESULT =null;
		int plustruncleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plustruncright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> plustrunc = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = plustrunc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= literal 
            {
              LinkedList<rpn.Node> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		rpn.LiteralExpression lit = (rpn.LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(lit);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= IDENTIFIER 
            {
              LinkedList<rpn.Node> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(new rpn.VariableExpression(ident));
	                                          if (!parser.symbolTable.containsKey(ident)) {
                                                throw new Exception(ident + " not declared");
                                              }
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= term DIV factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.DIV);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= term MULT factor 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.MULT);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= term 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression MINUS term 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.MINUS);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression PLUS term 
            {
              LinkedList<rpn.Node> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<rpn.Node> e1 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> e2 = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                          e1.addAll(e2);
	                                          e1.add(rpn.Operation.PLUS);
	                                          RESULT = e1;
	                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration_inner ::= IDENTIFIER COMMA type_declaration_inner COMMA type_name 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nextdecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nextdecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<SymbolTableEntry> nextdec = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolTableEntry.TypeName type = (SymbolTableEntry.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                                                nextdec.addLast(new SymbolTableEntry(ident, type));
	                                                                                RESULT = nextdec;
	                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_inner",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration_inner ::= IDENTIFIER RBRACK EQ LBRACK type_name 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String ident = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SymbolTableEntry.TypeName type = (SymbolTableEntry.TypeName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                                                LinkedList<SymbolTableEntry> e1 = new LinkedList<>();
	                                                                                e1.addLast(new SymbolTableEntry(ident, type));
	                                                                                RESULT = e1;
	                                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_inner",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration_outer ::= LBRACK type_declaration_inner RBRACK 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	                                                     Iterator<SymbolTableEntry> rit = dec1.descendingIterator();
	                                                     Iterator<SymbolTableEntry> fit = dec1.iterator();
	                                                     while (fit.hasNext()) {
	                                                       SymbolTableEntry e1 = fit.next();
	                                                       SymbolTableEntry e2 = rit.next();
	                                                       SymbolTableEntry.TypeName tn = e1.getType();
	                                                       e1.setType(e2.getType());
	                                                       e2.setType(tn);
	                                                     }
	                                                     RESULT = dec1;
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_outer",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_list ::= type_declaration_outer 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.handleDeclaration(dec1);
	                                                     RESULT = dec1;
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= declaration_list type_declaration_outer 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dec2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dec2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<SymbolTableEntry> dec2 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.handleDeclaration(dec2);
	                                                     dec1.addAll(dec2);
	                                                     RESULT = dec1;
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_block ::= DECVAR declaration_list ENDVAR 
            {
              LinkedList<SymbolTableEntry> RESULT =null;
		int dec1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dec1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec1 = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = dec1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= FLOATING_POINT_LITERAL 
            {
              rpn.LiteralExpression RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Float lit = (java.lang.Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.floatTable.add(lit);
	                                                     RESULT = new rpn.LiteralExpression(lit);
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= INTEGER_LITERAL 
            {
              rpn.LiteralExpression RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer lit = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                                                     parser.integerTable.add(lit);
	                                                     RESULT = new rpn.LiteralExpression(lit);
	                                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_name ::= FLOAT 
            {
              SymbolTableEntry.TypeName RESULT =null;
		 RESULT = SymbolTableEntry.TypeName.FLOAT;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_name ::= INTEGER 
            {
              SymbolTableEntry.TypeName RESULT =null;
		 RESULT = SymbolTableEntry.TypeName.INTEGER; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // goal ::= statement_list 
            {
              LinkedList<rpn.Node> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= declaration_block statement_list 
            {
              LinkedList<rpn.Node> RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<SymbolTableEntry> dec = (LinkedList<SymbolTableEntry>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<rpn.Node> st = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<rpn.Node> start_val = (LinkedList<rpn.Node>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

