
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 28 21:15:41 ART 2017
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 28 21:15:41 ART 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\006\004\000" +
    "\002\006\003\000\002\007\005\000\002\010\007\000\002" +
    "\010\007\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\015\005\000\002\015\004" +
    "\000\002\015\003\000\002\015\003\000\002\016\010\000" +
    "\002\016\012\000\002\017\010\000\002\020\004\000\002" +
    "\020\003\000\002\021\010\000\002\022\010\000\002\022" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\014\004\011\023\006\026\005\031\010\056" +
    "\012\001\002\000\012\023\006\026\005\031\010\056\012" +
    "\001\002\000\016\020\033\033\023\035\022\053\034\054" +
    "\025\056\031\001\002\000\016\020\033\033\023\035\022" +
    "\053\034\054\025\056\031\001\002\000\020\002\uffdb\023" +
    "\uffdb\024\uffdb\026\uffdb\030\uffdb\031\uffdb\056\uffdb\001\002" +
    "\000\004\055\110\001\002\000\004\010\067\001\002\000" +
    "\004\017\021\001\002\000\004\002\020\001\002\000\014" +
    "\002\uffff\023\006\026\005\031\010\056\012\001\002\000" +
    "\020\002\uffe0\023\uffe0\024\uffe0\026\uffe0\030\uffe0\031\uffe0" +
    "\056\uffe0\001\002\000\020\002\uffe1\023\uffe1\024\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\056\uffe1\001\002\000\020\002\uffdc" +
    "\023\uffdc\024\uffdc\026\uffdc\030\uffdc\031\uffdc\056\uffdc\001" +
    "\002\000\004\002\001\001\002\000\016\020\033\033\023" +
    "\035\022\053\034\054\025\056\031\001\002\000\014\020" +
    "\033\033\023\053\034\054\025\056\031\001\002\000\004" +
    "\020\047\001\002\000\052\002\ufff1\013\042\021\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\034\ufff1\035\ufff1\040\043\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\056\ufff1\001\002\000\052\002\ufffb" +
    "\013\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\034\ufffb\035\ufffb\040\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\056\ufffb\001" +
    "\002\000\052\002\uffeb\013\uffeb\021\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\034\uffeb\035" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\056\uffeb\001\002\000\024\002\uffe3\023\uffe3\024" +
    "\uffe3\026\uffe3\030\uffe3\031\uffe3\034\037\035\040\056\uffe3" +
    "\001\002\000\052\002\uffee\013\uffee\021\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\034\uffee" +
    "\035\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\056\uffee\001\002\000\052\002\uffed\013\uffed" +
    "\021\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\034\uffed\035\uffed\040\uffed\042\uffed\043\uffed" +
    "\044\uffed\045\uffed\046\uffed\047\uffed\056\uffed\001\002\000" +
    "\052\002\uffec\013\uffec\021\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\034\uffec\035\uffec\040" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\056\uffec\001\002\000\016\020\033\033\023\035\022\053" +
    "\034\054\025\056\031\001\002\000\052\002\ufffc\013\ufffc" +
    "\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030" +
    "\ufffc\031\ufffc\034\ufffc\035\ufffc\040\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\056\ufffc\001\002\000" +
    "\010\021\036\034\037\035\040\001\002\000\052\002\uffea" +
    "\013\uffea\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\034\uffea\035\uffea\040\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\056\uffea\001" +
    "\002\000\014\020\033\033\023\053\034\054\025\056\031" +
    "\001\002\000\014\020\033\033\023\053\034\054\025\056" +
    "\031\001\002\000\052\002\ufff3\013\042\021\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\034" +
    "\ufff3\035\ufff3\040\043\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\056\ufff3\001\002\000\014\020\033\033" +
    "\023\053\034\054\025\056\031\001\002\000\014\020\033" +
    "\033\023\053\034\054\025\056\031\001\002\000\052\002" +
    "\uffef\013\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\034\uffef\035\uffef\040\uffef\042" +
    "\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\056\uffef" +
    "\001\002\000\052\002\ufff0\013\ufff0\021\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\034\ufff0" +
    "\035\ufff0\040\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\056\ufff0\001\002\000\052\002\ufff4\013\042" +
    "\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\034\ufff4\035\ufff4\040\043\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\056\ufff4\001\002\000" +
    "\004\010\050\001\002\000\004\032\051\001\002\000\004" +
    "\020\062\001\002\000\006\011\053\014\054\001\002\000" +
    "\004\021\061\001\002\000\004\032\055\001\002\000\004" +
    "\020\056\001\002\000\016\020\033\033\023\035\022\053" +
    "\034\054\025\056\031\001\002\000\010\021\060\034\037" +
    "\035\040\001\002\000\006\011\uffd9\014\uffd9\001\002\000" +
    "\052\002\uffda\013\uffda\021\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\034\uffda\035\uffda\040" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\056\uffda\001\002\000\016\020\033\033\023\035\022\053" +
    "\034\054\025\056\031\001\002\000\010\021\064\034\037" +
    "\035\040\001\002\000\006\011\uffd8\014\uffd8\001\002\000" +
    "\052\002\ufff2\013\042\021\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\031\ufff2\034\ufff2\035\ufff2\040" +
    "\043\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\056\ufff2\001\002\000\006\005\ufff8\010\ufff8\001\002\000" +
    "\004\056\073\001\002\000\006\005\072\010\067\001\002" +
    "\000\006\005\ufff9\010\ufff9\001\002\000\012\023\ufffa\026" +
    "\ufffa\031\ufffa\056\ufffa\001\002\000\006\011\076\014\077" +
    "\001\002\000\004\011\075\001\002\000\006\005\ufff7\010" +
    "\ufff7\001\002\000\004\050\105\001\002\000\004\056\073" +
    "\001\002\000\004\014\101\001\002\000\006\006\102\007" +
    "\104\001\002\000\006\011\ufffe\014\ufffe\001\002\000\006" +
    "\011\ufff5\014\ufff5\001\002\000\006\011\ufffd\014\ufffd\001" +
    "\002\000\004\010\106\001\002\000\006\006\102\007\104" +
    "\001\002\000\006\011\ufff6\014\ufff6\001\002\000\020\002" +
    "\uffe2\023\uffe2\024\uffe2\026\uffe2\030\uffe2\031\uffe2\056\uffe2" +
    "\001\002\000\004\025\127\001\002\000\022\034\037\035" +
    "\040\042\113\043\115\044\120\045\114\046\117\047\116" +
    "\001\002\000\016\020\033\033\023\035\022\053\034\054" +
    "\025\056\031\001\002\000\016\020\033\033\023\035\022" +
    "\053\034\054\025\056\031\001\002\000\016\020\033\033" +
    "\023\035\022\053\034\054\025\056\031\001\002\000\016" +
    "\020\033\033\023\035\022\053\034\054\025\056\031\001" +
    "\002\000\016\020\033\033\023\035\022\053\034\054\025" +
    "\056\031\001\002\000\016\020\033\033\023\035\022\053" +
    "\034\054\025\056\031\001\002\000\012\025\uffe9\027\uffe9" +
    "\034\037\035\040\001\002\000\012\025\uffe5\027\uffe5\034" +
    "\037\035\040\001\002\000\012\025\uffe4\027\uffe4\034\037" +
    "\035\040\001\002\000\012\025\uffe6\027\uffe6\034\037\035" +
    "\040\001\002\000\012\025\uffe7\027\uffe7\034\037\035\040" +
    "\001\002\000\012\025\uffe8\027\uffe8\034\037\035\040\001" +
    "\002\000\012\023\006\026\005\031\010\056\012\001\002" +
    "\000\016\023\006\024\131\026\005\030\132\031\010\056" +
    "\012\001\002\000\012\023\006\026\005\031\010\056\012" +
    "\001\002\000\004\023\133\001\002\000\020\002\uffdf\023" +
    "\uffdf\024\uffdf\026\uffdf\030\uffdf\031\uffdf\056\uffdf\001\002" +
    "\000\014\023\006\026\005\030\135\031\010\056\012\001" +
    "\002\000\004\023\136\001\002\000\020\002\uffde\023\uffde" +
    "\024\uffde\026\uffde\030\uffde\031\uffde\056\uffde\001\002\000" +
    "\004\027\140\001\002\000\012\023\006\026\005\031\010" +
    "\056\012\001\002\000\014\023\006\026\005\030\142\031" +
    "\010\056\012\001\002\000\004\026\143\001\002\000\020" +
    "\002\uffdd\023\uffdd\024\uffdd\026\uffdd\030\uffdd\031\uffdd\056" +
    "\uffdd\001\002\000\014\002\000\023\006\026\005\031\010" +
    "\056\012\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\016\002\012\005\003\015\006\016\015\017" +
    "\014\020\013\001\001\000\012\015\006\016\015\017\014" +
    "\020\143\001\001\000\016\004\031\011\111\012\023\013" +
    "\027\014\136\021\025\001\001\000\016\004\031\011\111" +
    "\012\023\013\027\014\110\021\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\067\007\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\016\016" +
    "\015\017\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\031\011" +
    "\026\012\023\013\027\021\025\001\001\000\012\004\031" +
    "\012\064\013\027\021\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\031\011\034\012\023\013\027\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\031\012\045\013\027\021\025\001\001" +
    "\000\012\004\031\012\040\013\027\021\025\001\001\000" +
    "\002\001\001\000\010\004\031\013\044\021\025\001\001" +
    "\000\010\004\031\013\043\021\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\031\011\056\012\023\013\027\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\031\011\062\012\023\013\027\021\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\073\001\001\000\004\007" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\077\001\001\000\002\001\001\000\004" +
    "\003\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\031\011\125\012\023\013\027" +
    "\021\025\001\001\000\014\004\031\011\124\012\023\013" +
    "\027\021\025\001\001\000\014\004\031\011\123\012\023" +
    "\013\027\021\025\001\001\000\014\004\031\011\122\012" +
    "\023\013\027\021\025\001\001\000\014\004\031\011\121" +
    "\012\023\013\027\021\025\001\001\000\014\004\031\011" +
    "\120\012\023\013\027\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\006\016\015" +
    "\017\014\020\127\001\001\000\010\015\016\016\015\017" +
    "\014\001\001\000\012\015\006\016\015\017\014\020\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\016\016\015\017\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\006\016\015\017" +
    "\014\020\140\001\001\000\010\015\016\016\015\017\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\016\016\015\017\014\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argument_list ::= TRUNC LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argument_list ::= argument_list COMMA TRUNC LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_call ::= PLUSTRUNC LPAREN LBRACK argument_list RBRACK RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement_list ::= statement 
            {
              constructs.Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement_list ::= statement_list statement 
            {
              constructs.Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while_statement ::= WHILE condition DO statement_list END WHILE 
            {
              constructs.WhileStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_statement ::= IF condition THEN statement_list ELSE statement_list END IF 
            {
              constructs.IfStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_statement ::= IF condition THEN statement_list END IF 
            {
              constructs.IfStatement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= while_statement 
            {
              constructs.Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= if_statement 
            {
              constructs.Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= PRINT STRING_LITERAL 
            {
              constructs.Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IDENTIFIER ASSIGN expression 
            {
              constructs.Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= expression NOTEQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= expression EQEQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= expression GT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= expression GTEQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= expression LT expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condition ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= LPAREN expression RPAREN 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= function_call 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= literal 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= IDENTIFIER 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term ::= factor 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= term DIV factor 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= term MULT factor 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= term 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= MINUS term 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression MINUS term 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression PLUS term 
            {
              constructs.Expression RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declaration_inner ::= IDENTIFIER COMMA type_declaration_inner COMMA type_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_inner",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declaration_inner ::= IDENTIFIER RBRACK EQ LBRACK type_name 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_inner",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration_outer ::= LBRACK type_declaration_inner RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declaration_outer",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration_list ::= type_declaration_outer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_list ::= declaration_list type_declaration_outer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_block ::= DECVAR declaration_list ENDVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // literal ::= FLOATING_POINT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_name ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_name ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // goal ::= statement_list 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= declaration_block statement_list 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean start_val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

