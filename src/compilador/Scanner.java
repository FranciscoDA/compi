/* The following code was generated by JFlex 1.6.1 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2015  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

package compilador;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/naninho205/IdeaProjects/compi/flex/java.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\72\1\73\1\1\16\10\4\0\1\3\1\62"+
    "\1\16\1\0\1\7\1\67\1\63\1\17\1\50\1\51\1\66\1\65"+
    "\1\60\1\15\1\13\1\5\1\11\11\12\1\57\1\56\1\4\1\61"+
    "\1\6\2\0\1\22\1\7\1\47\1\26\1\24\1\34\1\7\1\41"+
    "\1\27\2\7\1\42\1\7\1\25\1\7\1\44\1\7\1\23\1\43"+
    "\1\45\1\46\1\21\1\40\3\7\1\54\1\20\1\55\1\0\1\7"+
    "\1\0\1\37\1\70\2\7\1\14\1\71\1\32\4\7\1\35\1\7"+
    "\1\30\1\36\2\7\1\33\1\7\1\31\6\7\1\52\1\64\1\53"+
    "\1\0\6\10\1\74\32\10\2\0\4\7\4\0\1\7\2\0\1\10"+
    "\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7"+
    "\4\0\14\7\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10"+
    "\5\7\1\0\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0"+
    "\1\7\1\0\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0"+
    "\236\7\11\0\46\7\2\0\1\7\7\0\47\7\7\0\1\7\1\0"+
    "\55\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\10\0"+
    "\33\7\5\0\3\7\15\0\5\10\6\0\1\7\4\0\13\10\5\0"+
    "\53\7\37\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0"+
    "\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0\1\7"+
    "\17\0\1\10\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7"+
    "\16\0\12\10\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10"+
    "\1\7\11\10\1\7\3\10\1\7\5\10\22\0\31\7\3\10\104\0"+
    "\1\7\1\0\13\7\67\0\33\10\1\0\4\10\66\7\3\10\1\7"+
    "\22\10\1\7\7\10\12\7\2\10\2\0\12\10\1\0\7\7\1\0"+
    "\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7"+
    "\2\10\2\0\12\10\4\7\7\0\1\7\5\0\3\10\1\0\6\7"+
    "\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10"+
    "\3\0\1\10\7\0\4\7\1\0\1\7\7\0\14\10\3\7\1\10"+
    "\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10"+
    "\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10\1\0"+
    "\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0"+
    "\4\10\2\0\1\7\6\0\1\10\16\0\12\10\11\0\1\7\7\0"+
    "\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10"+
    "\1\0\2\7\6\0\2\7\2\10\2\0\12\10\22\0\2\10\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0"+
    "\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0"+
    "\1\7\1\0\2\7\2\10\2\0\12\10\1\0\2\7\17\0\2\10"+
    "\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0"+
    "\12\10\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0"+
    "\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10"+
    "\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0"+
    "\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0"+
    "\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10"+
    "\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0"+
    "\6\10\2\0\12\10\2\0\4\7\40\0\1\7\27\0\2\10\6\0"+
    "\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7"+
    "\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10"+
    "\11\0\1\10\71\0\53\7\24\10\1\7\12\10\6\0\6\7\4\10"+
    "\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10"+
    "\1\7\17\10\2\0\46\7\1\0\1\7\5\0\1\7\2\0\53\7"+
    "\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0\4\7"+
    "\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7"+
    "\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0\15\7"+
    "\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10\14\0"+
    "\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0\1\7"+
    "\3\0\2\7\1\10\2\0\12\10\41\0\3\10\2\0\12\10\6\0"+
    "\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7\3\0"+
    "\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\21\10\7\7\2\10\6\0\12\10\46\0\27\7\5\10\4\0"+
    "\65\7\12\10\1\0\35\10\2\0\13\10\6\0\12\10\15\0\1\7"+
    "\130\0\5\10\57\7\21\10\7\7\4\0\12\10\21\0\11\10\14\0"+
    "\3\10\36\7\15\10\2\7\12\10\54\7\16\10\14\0\44\7\24\10"+
    "\10\0\12\10\3\0\3\7\12\10\44\7\122\0\3\10\1\0\25\10"+
    "\4\7\1\10\4\7\3\10\2\7\11\0\300\7\47\10\25\0\4\10"+
    "\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0"+
    "\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0"+
    "\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0\5\10\30\0"+
    "\1\72\1\72\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0"+
    "\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7"+
    "\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0"+
    "\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10"+
    "\2\0\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\10"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7"+
    "\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10"+
    "\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10\7\0\32\7"+
    "\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10"+
    "\4\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7"+
    "\2\0\16\7\42\0\173\7\105\0\65\7\210\0\1\10\202\0\35\7"+
    "\3\0\61\7\57\0\37\7\21\0\33\7\65\0\36\7\2\0\44\7"+
    "\4\0\10\7\1\0\5\7\52\0\236\7\2\0\12\10\u0356\0\6\7"+
    "\2\0\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0\27\7"+
    "\252\0\26\7\12\0\32\7\106\0\70\7\6\0\2\7\100\0\1\7"+
    "\3\10\1\0\2\10\5\0\4\10\4\7\1\0\3\7\1\0\33\7"+
    "\4\0\3\10\4\0\1\10\40\0\35\7\203\0\66\7\12\0\26\7"+
    "\12\0\23\7\215\0\111\7\u03b7\0\3\10\65\7\17\10\37\0\12\10"+
    "\20\0\3\10\55\7\13\10\2\0\1\10\22\0\31\7\7\0\12\10"+
    "\6\0\3\10\44\7\16\10\1\0\12\10\100\0\3\10\60\7\16\10"+
    "\4\7\13\0\12\10\u04a6\0\53\7\15\10\10\0\12\10\u0936\0\u036f\7"+
    "\221\0\143\7\u0b9d\0\u042f\7\u33d1\0\u0239\7\u04c7\0\105\7\13\0\1\7"+
    "\56\10\20\0\4\10\15\7\u4060\0\2\7\u2163\0\5\10\3\0\26\10"+
    "\2\0\7\10\36\0\4\10\224\0\3\10\u01bb\0\125\7\1\0\107\7"+
    "\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0\14\7"+
    "\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7\2\0\10\7"+
    "\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7\1\0\1\7"+
    "\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7"+
    "\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7"+
    "\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\10\u1600\0\4\7"+
    "\1\0\33\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\12\7"+
    "\1\0\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\1\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\2\7\1\0\1\7\2\0\4\7\1\0\7\7\1\0\4\7"+
    "\1\0\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0\3\7"+
    "\1\0\5\7\1\0\21\7\u1144\0\ua6d7\7\51\0\u1035\7\13\0\336\7"+
    "\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\10\36\0\140\10\200\0\360\10\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\1\1\10\1\11\1\12\7\6\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\1\1\26\1\27\1\30\1\31\2\32\1\33\2\1"+
    "\2\34\1\1\1\0\1\35\1\36\2\37\1\0\4\6"+
    "\1\40\5\6\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\10\45\1\0\1\37\1\0\1\57\10\6\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\6"+
    "\1\71\10\6\1\72\1\73\1\74\1\6\1\75\1\76"+
    "\2\6\1\77\2\6\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\267\0\u0131\0\267"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\267\0\267\0\267"+
    "\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u044a\0\u0487\0\u04c4\0\u0501\0\267\0\267\0\267\0\u053e"+
    "\0\u057b\0\267\0\267\0\u05b8\0\u05f5\0\u0632\0\267\0\u066f"+
    "\0\u06ac\0\267\0\267\0\u01e8\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u01ab\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bad\0\u01ab\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\u0dd2\0\u01ab\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u0ff7\0\u01ab\0\u01ab\0\u1034\0\u1071\0\u01ab\0\u10ae\0\u10eb"+
    "\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\12\1\16\1\17\1\20\1\4"+
    "\1\21\2\12\1\22\2\12\1\23\4\12\1\24\3\12"+
    "\1\25\3\12\1\26\1\27\2\12\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\2\12\1\4\1\6"+
    "\1\4\1\50\1\51\1\52\13\50\1\53\1\50\1\54"+
    "\54\50\1\55\1\56\1\57\14\55\1\4\1\60\54\55"+
    "\77\0\1\6\77\0\1\61\53\0\1\62\74\0\1\63"+
    "\22\0\4\12\1\0\1\12\4\0\27\12\20\0\2\12"+
    "\2\0\1\12\11\0\2\64\1\65\1\66\7\0\1\66"+
    "\61\0\2\14\1\65\1\66\7\0\1\66\61\0\2\65"+
    "\71\0\4\12\1\0\1\12\4\0\1\12\1\67\25\12"+
    "\20\0\2\12\2\0\1\12\7\0\4\12\1\0\1\12"+
    "\4\0\4\12\1\70\14\12\1\71\5\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\7\12"+
    "\1\72\3\12\1\73\13\12\20\0\2\12\2\0\1\12"+
    "\7\0\4\12\1\0\1\12\4\0\14\12\1\74\12\12"+
    "\20\0\2\12\2\0\1\12\7\0\4\12\1\0\1\12"+
    "\4\0\20\12\1\75\6\12\20\0\2\12\2\0\1\12"+
    "\7\0\4\12\1\0\1\12\4\0\2\12\1\76\16\12"+
    "\1\77\5\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\2\12\1\100\24\12\20\0\2\12"+
    "\2\0\1\12\61\0\1\101\74\0\1\102\76\0\1\103"+
    "\75\0\1\104\10\0\1\50\2\0\13\50\1\0\1\50"+
    "\1\0\54\50\2\0\1\52\72\0\1\105\2\0\13\105"+
    "\1\106\1\107\1\110\7\105\1\111\1\112\1\105\1\113"+
    "\34\105\1\114\1\115\22\0\1\116\57\0\1\57\72\0"+
    "\1\105\2\0\13\105\1\117\1\120\1\121\7\105\1\122"+
    "\1\123\1\105\1\124\34\105\1\125\1\126\3\0\5\61"+
    "\1\127\67\61\11\0\2\65\1\0\1\66\7\0\1\66"+
    "\61\0\2\130\2\0\1\131\47\0\1\131\16\0\4\12"+
    "\1\0\1\12\4\0\2\12\1\132\24\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\5\12"+
    "\1\133\21\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\22\12\1\134\4\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\10\12"+
    "\1\135\16\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\15\12\1\136\11\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\6\12"+
    "\1\137\20\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\6\12\1\140\20\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\25\12"+
    "\1\141\1\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\25\12\1\142\1\12\20\0\2\12"+
    "\2\0\1\12\17\0\1\143\74\0\1\144\74\0\1\145"+
    "\74\0\1\146\74\0\1\147\74\0\1\150\74\0\1\151"+
    "\74\0\1\152\55\0\5\61\1\127\1\153\66\61\11\0"+
    "\2\130\71\0\4\12\1\0\1\12\4\0\1\154\26\12"+
    "\20\0\2\12\2\0\1\12\7\0\4\12\1\0\1\12"+
    "\4\0\3\12\1\155\23\12\20\0\2\12\2\0\1\12"+
    "\7\0\4\12\1\0\1\156\4\0\27\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\16\12"+
    "\1\157\10\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\21\12\1\160\5\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\4\12"+
    "\1\161\22\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\22\12\1\162\4\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\4\12"+
    "\1\163\22\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\1\12\1\164\25\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\11\12"+
    "\1\165\15\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\10\12\1\166\16\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\3\12"+
    "\1\167\23\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\24\12\1\170\2\12\20\0\2\12"+
    "\2\0\1\12\7\0\4\12\1\0\1\12\4\0\24\12"+
    "\1\171\2\12\20\0\2\12\2\0\1\12\7\0\4\12"+
    "\1\0\1\12\4\0\26\12\1\172\20\0\2\12\2\0"+
    "\1\12\7\0\4\12\1\0\1\12\4\0\2\12\1\173"+
    "\24\12\20\0\2\12\2\0\1\12\7\0\4\12\1\0"+
    "\1\174\4\0\27\12\20\0\2\12\2\0\1\12\7\0"+
    "\4\12\1\0\1\12\4\0\2\12\1\175\24\12\20\0"+
    "\2\12\2\0\1\12\7\0\4\12\1\0\1\12\4\0"+
    "\12\12\1\176\14\12\20\0\2\12\2\0\1\12\7\0"+
    "\4\12\1\0\1\12\4\0\25\12\1\177\1\12\20\0"+
    "\2\12\2\0\1\12\7\0\4\12\1\0\1\12\4\0"+
    "\4\12\1\200\22\12\20\0\2\12\2\0\1\12\7\0"+
    "\4\12\1\0\1\12\4\0\26\12\1\201\20\0\2\12"+
    "\2\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4392];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\5\1\3\11"+
    "\7\1\11\11\4\1\3\11\2\1\2\11\3\1\1\11"+
    "\1\1\1\0\2\11\2\1\1\0\12\1\16\11\10\1"+
    "\1\0\1\1\1\0\11\1\11\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  final int MAX_STRING = 30;
  final int MAX_INT = Short.MAX_VALUE;
  final float MAX_FLOAT = Float.MAX_VALUE;

  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type) {
    return new JavaSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new JavaSymbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }

  private boolean verify_real(String x) {
      float f = Float.parseFloat(x);
      if (f < -MAX_FLOAT || f > MAX_FLOAT) {
          throw new NumberFormatException();
      }
      return true;
  }
  private boolean verify_int(String x) {
      int i = Integer.parseInt(x);
      if (i < -MAX_INT || i > MAX_INT) {
          throw new NumberFormatException();
      }
      return true;
  }
  private boolean verify_string(String x) {
      if (x.length() > MAX_STRING) {
          throw new NumberFormatException();
      }
      return true;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2884) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
          case 65: break;
          case 2: 
            { /* ignore */
            }
          case 66: break;
          case 3: 
            { return symbol(LT);
            }
          case 67: break;
          case 4: 
            { return symbol(DIV);
            }
          case 68: break;
          case 5: 
            { return symbol(GT);
            }
          case 69: break;
          case 6: 
            { return symbol(IDENTIFIER, yytext());
            }
          case 70: break;
          case 7: 
            { verify_int(yytext());
                                    return symbol(INTEGER_LITERAL, new Integer(yytext()));
            }
          case 71: break;
          case 8: 
            { return symbol(MINUS);
            }
          case 72: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            }
          case 73: break;
          case 10: 
            { yybegin(CHARLITERAL);
            }
          case 74: break;
          case 11: 
            { return symbol(LPAREN);
            }
          case 75: break;
          case 12: 
            { return symbol(RPAREN);
            }
          case 76: break;
          case 13: 
            { return symbol(LBRACE);
            }
          case 77: break;
          case 14: 
            { return symbol(RBRACE);
            }
          case 78: break;
          case 15: 
            { return symbol(LBRACK);
            }
          case 79: break;
          case 16: 
            { return symbol(RBRACK);
            }
          case 80: break;
          case 17: 
            { return symbol(SEMICOLON);
            }
          case 81: break;
          case 18: 
            { return symbol(COLON);
            }
          case 82: break;
          case 19: 
            { return symbol(COMMA);
            }
          case 83: break;
          case 20: 
            { return symbol(EQ);
            }
          case 84: break;
          case 21: 
            { return symbol(NOT);
            }
          case 85: break;
          case 22: 
            { return symbol(PLUS);
            }
          case 86: break;
          case 23: 
            { return symbol(MULT);
            }
          case 87: break;
          case 24: 
            { return symbol(MOD);
            }
          case 88: break;
          case 25: 
            { string.append( yytext() );
            }
          case 89: break;
          case 26: 
            { throw new RuntimeException("Unterminated string at end of line");
            }
          case 90: break;
          case 27: 
            { yybegin(YYINITIAL);
                                    verify_string(string.toString());
                                    return symbol(STRING_LITERAL, string.toString());
            }
          case 91: break;
          case 28: 
            { throw new RuntimeException("Unterminated character literal at end of line");
            }
          case 92: break;
          case 29: 
            { return symbol(LTEQ);
            }
          case 93: break;
          case 30: 
            { return symbol(GTEQ);
            }
          case 94: break;
          case 31: 
            { verify_real(yytext());
                                    return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
          case 95: break;
          case 32: 
            { return symbol(IF);
            }
          case 96: break;
          case 33: 
            { return symbol(EQEQ);
            }
          case 97: break;
          case 34: 
            { return symbol(NOTEQ);
            }
          case 98: break;
          case 35: 
            { return symbol(ANDAND);
            }
          case 99: break;
          case 36: 
            { return symbol(OROR);
            }
          case 100: break;
          case 37: 
            { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
            }
          case 101: break;
          case 38: 
            { string.append( '\"' );
            }
          case 102: break;
          case 39: 
            { string.append( '\'' );
            }
          case 103: break;
          case 40: 
            { string.append( '\\' );
            }
          case 104: break;
          case 41: 
            { string.append( '\n' );
            }
          case 105: break;
          case 42: 
            { string.append( '\t' );
            }
          case 106: break;
          case 43: 
            { string.append( '\r' );
            }
          case 107: break;
          case 44: 
            { string.append( '\b' );
            }
          case 108: break;
          case 45: 
            { string.append( '\f' );
            }
          case 109: break;
          case 46: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, yytext().charAt(0));
            }
          case 110: break;
          case 47: 
            { return symbol(DECVAR);
            }
          case 111: break;
          case 48: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\"');
            }
          case 112: break;
          case 49: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\'');
            }
          case 113: break;
          case 50: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\\');
            }
          case 114: break;
          case 51: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\n');
            }
          case 115: break;
          case 52: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\t');
            }
          case 116: break;
          case 53: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\r');
            }
          case 117: break;
          case 54: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\b');
            }
          case 118: break;
          case 55: 
            { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, '\f');
            }
          case 119: break;
          case 56: 
            { /**/
            }
          case 120: break;
          case 57: 
            { return symbol(ELSE);
            }
          case 121: break;
          case 58: 
            { return symbol(FLOAT);
            }
          case 122: break;
          case 59: 
            { return symbol(WHILE);
            }
          case 123: break;
          case 60: 
            { return symbol(PRINT);
            }
          case 124: break;
          case 61: 
            { return symbol(TRUNC);
            }
          case 125: break;
          case 62: 
            { return symbol(ENDDEC);
            }
          case 126: break;
          case 63: 
            { return symbol(INTEGER);
            }
          case 127: break;
          case 64: 
            { return symbol(PLUSTRUNC);
            }
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
