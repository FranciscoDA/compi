package compilador;
import java_cup.runtime.*;

/* Java 1.2 parser for CUP.  
 * Copyright (C) 1998 C. Scott Ananian <cananian@alumni.princeton.edu>
 * This program is released under the terms of the GPL; see the file
 * COPYING for more details.  There is NO WARRANTY on this code.
 */

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

terminal DECVAR;
terminal ENDVAR;
terminal INTEGER;
terminal FLOAT;

terminal LBRACK, RBRACK;
terminal SEMICOLON, MULT, COMMA, LBRACE, RBRACE, ASSIGN, LPAREN, RPAREN, COLON;

terminal IF, ELSE, THEN;
terminal WHILE, DO;
terminal END;
terminal PRINT;

terminal TRUNC;
terminal PLUSTRUNC;


terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal LT, GT, LTEQ, GTEQ; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression
terminal EQ;

terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Float FLOATING_POINT_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER; // name



non terminal constructs.Program goal;

non terminal constructs.TypeName          type_name;
non terminal constructs.LiteralExpression literal;

non terminal constructs.Declaration declaration_block, declaration_list;
non terminal constructs.Declaration type_declaration_outer, type_declaration_inner;

non terminal constructs.Expression expression, term, factor;
non terminal constructs.Condition  condition;

non terminal constructs.Statement      statement, statement_list;
non terminal constructs.IfStatement    if_statement;
non terminal constructs.WhileStatement while_statement;

non terminal constructs.PlusTrunc function_call;
non terminal constructs.PlusTrunc argument_list;
non terminal constructs.PlusTrunc bracketed_argument_list;

start with goal;


goal ::=
	declaration_block:dec statement_list:st {: RESULT = new constructs.Program(st, dec); :}
	| statement_list:st                     {: RESULT = new constructs.Program(st);      :}
	;

type_name ::=
	INTEGER {: RESULT = constructs.TypeName.INTEGER; :}
	| FLOAT {: RESULT = constructs.TypeName.FLOAT;   :}
	;

literal ::=
	INTEGER_LITERAL:lit          {: RESULT = new constructs.LiteralExpression(lit); :}
	| FLOATING_POINT_LITERAL:lit {: RESULT = new constructs.LiteralExpression(lit); :}
	;

declaration_block ::=
	DECVAR declaration_list:dec1 ENDVAR {: RESULT = dec1; :}
	;

declaration_list ::=
	declaration_list:dec1 type_declaration_outer:dec2 {: dec1.concatenate(dec2); RESULT = dec1; :}
	| type_declaration_outer:dec1                     {: RESULT = dec1; :}
	;

type_declaration_outer ::=
	LBRACK type_declaration_inner:dec1 RBRACK         {: dec1.invert(); RESULT = dec1; :}
	;
	
type_declaration_inner ::=
	IDENTIFIER:ident RBRACK EQ LBRACK type_name:type                             {: RESULT = new constructs.Declaration(ident, type); :}
	| IDENTIFIER:ident COMMA type_declaration_inner:nextdec COMMA type_name:type {: RESULT = new constructs.Declaration(ident, type, nextdec); RESULT.setNext(nextdec); :}   
	;

expression ::=
	expression:e1 PLUS term:e2    {: RESULT = new constructs.BinaryExpression(e1, constructs.BinaryOperator.PLUS, e2); :}
	| expression:e1 MINUS term:e2 {: RESULT = new constructs.BinaryExpression(e1, constructs.BinaryOperator.MINUS, e2); :}
	| term:e1                     {: RESULT = e1; :}
	;

term ::=
	term:e1 MULT factor:e2  {: RESULT = new constructs.BinaryExpression(e1, constructs.BinaryOperator.MULT, e2); :}
	| term:e1 DIV factor:e2 {: RESULT = new constructs.BinaryExpression(e1, constructs.BinaryOperator.DIV, e2); :}
	| factor:e1             {: RESULT = e1; :}
	;

factor ::=
	IDENTIFIER:ident              {: RESULT = new constructs.VariableExpression(ident); :}
	| literal:lit                 {: RESULT = lit; :}
	| function_call:plustrunc     {: RESULT = plustrunc; :}
	| LPAREN expression:e1 RPAREN {: RESULT = e1; :}
	;

condition ::=
	expression:e1 LTEQ expression:e2    {: RESULT = new constructs.Condition(e1, constructs.BinaryComparator.LTEQ, e2); :}
	| expression:e1 LT expression:e2    {: RESULT = new constructs.Condition(e1, constructs.BinaryComparator.LT, e2); :}
	| expression:e1 GTEQ expression:e2  {: RESULT = new constructs.Condition(e1, constructs.BinaryComparator.GTEQ, e2); :}
	| expression:e1 GT expression:e2    {: RESULT = new constructs.Condition(e1, constructs.BinaryComparator.GT, e2); :}
	| expression:e1 EQEQ expression:e2  {: RESULT = new constructs.Condition(e1, constructs.BinaryComparator.EQEQ, e2); :}
	| expression:e1 NOTEQ expression:e2 {: RESULT = new constructs.Condition(e1, constructs.BinaryComparator.NOTEQ, e2); :}
	; 

statement ::=
	IDENTIFIER:ident ASSIGN expression:exp {: RESULT = new constructs.AssignStatement(ident, exp); :}
	| PRINT STRING_LITERAL:text            {: RESULT = new constructs.PrintStatement(text); :}
	| if_statement:st1                     {: RESULT = st1; :}
	| while_statement:st1                  {: RESULT = st1; :}
	;

if_statement ::=
	IF condition:cond THEN statement_list:branch END IF                           {: RESULT = new constructs.IfStatement(cond, branch, null); :}
	| IF condition:cond THEN statement_list:branch ELSE statement_list:els END IF {: RESULT = new constructs.IfStatement(cond, branch, els);  :} 
	;

while_statement ::=
	WHILE condition:cond DO statement_list:branch END WHILE {: RESULT = new constructs.WhileStatement(cond, branch); :}
	;


statement_list ::=
	statement_list:st1 statement:st2                              {: st1.concatenate(st2); RESULT = st1; :}
	| statement:st1                                               {: RESULT = st1; :}
	;


function_call ::=
	PLUSTRUNC LPAREN LBRACK argument_list:plustrunc RBRACK RPAREN {: RESULT = plustrunc; :}
	;

argument_list ::=
	argument_list:trunc COMMA TRUNC LPAREN expression:expr RPAREN {: trunc.setNext(new constructs.PlusTrunc(expr)); RESULT = trunc; :}
	| TRUNC LPAREN expression:expr RPAREN                         {: RESULT = new constructs.PlusTrunc(expr); :}
	;
