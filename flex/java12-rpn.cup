package compilador;
import java_cup.runtime.*;
import rpn.*;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

/* Java 1.2 parser for CUP.  
 * Copyright (C) 1998 C. Scott Ananian <cananian@alumni.princeton.edu>
 * This program is released under the terms of the GPL; see the file
 * COPYING for more details.  There is NO WARRANTY on this code.
 */

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
  public void handleDeclaration(LinkedList<SymbolTableEntry> dec2) throws Exception {
  	for (SymbolTableEntry entry : dec2) {
      if (symbolTable.containsKey(entry.getName())) {
        throw new Exception("Multiple declaration of " + entry.getName());
      }
      symbolTable.put(entry.getName(), entry);
  	}
  }
  public SymbolTableEntry.TypeName getVariableType(String varName)
  {
  	return symbolTable.get(varName).getType();
  }
  public HashMap<String, SymbolTableEntry> symbolTable = new HashMap<>();
  public HashSet<Integer> integerTable = new HashSet<>();
  public HashSet<Float> floatTable = new HashSet<>();
  public HashSet<String> stringTable = new HashSet<>();
  public int counter = 0;
:};

terminal DECVAR;
terminal ENDVAR;
terminal INTEGER;
terminal FLOAT;

terminal LBRACK, RBRACK;
terminal SEMICOLON, MULT, COMMA, LBRACE, RBRACE, ASSIGN, LPAREN, RPAREN, COLON;

terminal IF, ELSE, THEN;
terminal WHILE, DO;
terminal END;
terminal PRINT;

terminal TRUNC;
terminal PLUSTRUNC;


terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal LT, GT, LTEQ, GTEQ; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression
terminal EQ;

terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Float FLOATING_POINT_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER; // name



non terminal LinkedList<rpn.Node> goal;

non terminal SymbolTableEntry.TypeName type_name;
non terminal rpn.LiteralExpression  literal;

non terminal LinkedList<SymbolTableEntry> declaration_block, declaration_list;
non terminal LinkedList<SymbolTableEntry> type_declaration_outer, type_declaration_inner;

non terminal LinkedList<rpn.Node> expression, term, factor;
non terminal LinkedList<rpn.Node> condition;

non terminal LinkedList<rpn.Node> statement, statement_list;
non terminal LinkedList<rpn.Node> if_statement;
non terminal LinkedList<rpn.Node> while_statement;

non terminal LinkedList<rpn.Node> function_call;
non terminal LinkedList<rpn.Node> argument_list;
non terminal LinkedList<rpn.Node> bracketed_argument_list;

start with goal;


goal ::=
	declaration_block:dec statement_list:st           {: RESULT = st; :}
	| statement_list:st                               {: RESULT = st; :}
	;

type_name ::=
	INTEGER                                           {: RESULT = SymbolTableEntry.TypeName.INTEGER; :}
	| FLOAT                                           {: RESULT = SymbolTableEntry.TypeName.FLOAT;   :}
	;

literal ::=
	INTEGER_LITERAL:lit                               {:
	                                                     parser.integerTable.add(lit);
	                                                     RESULT = new rpn.LiteralExpression(lit);
	                                                  :}
	| FLOATING_POINT_LITERAL:lit                      {:
	                                                     parser.floatTable.add(lit);
	                                                     RESULT = new rpn.LiteralExpression(lit);
	                                                  :}
	;

declaration_block ::=
	DECVAR declaration_list:dec1 ENDVAR               {: RESULT = dec1; :}
	;

declaration_list ::=
	declaration_list:dec1 type_declaration_outer:dec2 {:
	                                                     parser.handleDeclaration(dec2);
	                                                     dec1.addAll(dec2);
	                                                     RESULT = dec1;
	                                                  :}
	| type_declaration_outer:dec1                     {:
	                                                     parser.handleDeclaration(dec1);
	                                                     RESULT = dec1;
	                                                  :}
	;

type_declaration_outer ::=
	LBRACK type_declaration_inner:dec1 RBRACK         {:
	                                                     Iterator<SymbolTableEntry> rit = dec1.descendingIterator();
	                                                     Iterator<SymbolTableEntry> fit = dec1.iterator();
	                                                     while (fit.hasNext()) {
	                                                       SymbolTableEntry e1 = fit.next();
	                                                       SymbolTableEntry e2 = rit.next();
	                                                       SymbolTableEntry.TypeName tn = e1.getType();
	                                                       e1.setType(e2.getType());
	                                                       e2.setType(tn);
	                                                     }
	                                                     RESULT = dec1;
	                                                  :}
	;
	
type_declaration_inner ::=
	IDENTIFIER:ident RBRACK EQ LBRACK type_name:type                             {:
	                                                                                LinkedList<SymbolTableEntry> e1 = new LinkedList<>();
	                                                                                e1.addLast(new SymbolTableEntry(ident, type));
	                                                                                RESULT = e1;
	                                                                             :}
	| IDENTIFIER:ident COMMA type_declaration_inner:nextdec COMMA type_name:type {:
	                                                                                nextdec.addLast(new SymbolTableEntry(ident, type));
	                                                                                RESULT = nextdec;
	                                                                             :}
	;

expression ::=
	expression:e1 PLUS term:e2             {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.PLUS);
	                                          RESULT = e1;
	                                       :}
	| expression:e1 MINUS term:e2          {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.MINUS);
	                                          RESULT = e1;
	                                       :}
	| term:e1                              {: RESULT = e1; :}
	;

term ::=
	term:e1 MULT factor:e2                 {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.MULT);
	                                          RESULT = e1;
	                                       :}
	| term:e1 DIV factor:e2                {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.DIV);
	                                          RESULT = e1;
	                                       :}
	| factor:e1                            {: RESULT = e1; :}
	;

factor ::=
	IDENTIFIER:ident                       {:
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(new rpn.VariableExpression(ident));
	                                          if (!parser.symbolTable.containsKey(ident)) {
                                                throw new Exception(ident + " not declared");
                                              }
	                                          RESULT = e1;
	                                       :}
	| literal:lit                          {:
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.addLast(lit);
	                                          RESULT = e1;
	                                       :}
	| function_call:plustrunc              {: RESULT = plustrunc; :}
	| LPAREN expression:e1 RPAREN          {: RESULT = e1; :}
	;

condition ::=
	expression:e1 LTEQ expression:e2       {:
	                                          e1.addAll(e2);
	                                          e1.addLast(rpn.BinaryOperator.CMP);
	                                          e1.addLast(rpn.Comparator.GT);
	                                          RESULT = e1;
	                                       :}
	| expression:e1 LT expression:e2       {:
	                                          e1.addAll(e2);
	                                          e1.addLast(rpn.BinaryOperator.CMP);
	                                          e1.addLast(rpn.Comparator.GTEQ);
	                                          RESULT = e1;
	                                       :}
	| expression:e1 GTEQ expression:e2     {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.CMP);
	                                          e1.add(rpn.Comparator.LT);
	                                          RESULT = e1;
	                                       :}
	| expression:e1 GT expression:e2       {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.CMP);
	                                          e1.add(rpn.Comparator.LTEQ);
	                                          RESULT = e1;
	                                       :}
	| expression:e1 EQEQ expression:e2     {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.CMP);
	                                          e1.add(rpn.Comparator.NEQ);
	                                          RESULT = e1;
	                                       :}
	| expression:e1 NOTEQ expression:e2    {:
	                                          e1.addAll(e2);
	                                          e1.add(rpn.BinaryOperator.CMP);
	                                          e1.add(rpn.Comparator.EQEQ);
	                                          RESULT = e1;
	                                       :}
	;

statement ::=
	IDENTIFIER:ident ASSIGN expression:exp {:
	                                          exp.add(new rpn.VariableExpression(ident));
	                                          exp.add(rpn.BinaryOperator.ASSIGN);
	                                          RESULT = exp;
	                                       :}
	| PRINT STRING_LITERAL:text            {:
	                                          parser.stringTable.add(text);
	                                          LinkedList<rpn.Node> e1 = new LinkedList<>();
	                                          e1.add(new rpn.LiteralExpression(text));
	                                          e1.add(rpn.UnaryOperator.PRINT);
	                                          RESULT = e1;
	                                       :}
	| if_statement:st1                     {: RESULT = st1; :}
	| while_statement:st1                  {: RESULT = st1; :}
	;

if_statement ::=
	IF condition:cond THEN statement_list:branch END IF                           {:
	                                                                                 int x = parser.counter++;
	                                                                                 rpn.Node jumpLocation = new rpn.JumpLabel(x);
	                                                                                 rpn.Node jumpDest = new rpn.LabelDeclaration(x);
	                                                                                 cond.addLast(jumpLocation);
	                                                                                 cond.addAll(branch);
	                                                                                 cond.addLast(jumpDest);
	                                                                                 RESULT = cond;
	                                                                              :}
	| IF condition:cond THEN statement_list:branch ELSE statement_list:els END IF {:
	                                                                                 int x = parser.counter++;
	                                                                                 int y = parser.counter++;
	                                                                                 rpn.Node jumpToElse = new rpn.JumpLabel(x);
	                                                                                 rpn.Node jumpToEnd = new rpn.JumpLabel(y);
	                                                                                 rpn.Node elseDest = new rpn.LabelDeclaration(x);
	                                                                                 rpn.Node endDest = new rpn.LabelDeclaration(y);
	                                                                                 
	                                                                                 cond.addLast(jumpToElse);
	                                                                                 cond.addAll(branch);
	                                                                                 cond.addLast(rpn.ControlOperator.JMP);
	                                                                                 cond.addLast(jumpToEnd);
	                                                                                 cond.addLast(elseDest);
	                                                                                 cond.addAll(els);
	                                                                                 cond.addLast(endDest);
	                                                                                 
	                                                                                 RESULT = cond;
	                                                                              :}
	;

while_statement ::=
	WHILE condition:cond DO statement_list:branch END WHILE {:
	                                                           int x = parser.counter++;
	                                                           int y = parser.counter++;
	                                                           rpn.Node jumpToBegin = new rpn.JumpLabel(x);
                                                               rpn.Node jumpToEnd = new rpn.JumpLabel(y);
                                                               rpn.Node beginDest = new rpn.LabelDeclaration(x);
                                                               rpn.Node endDest = new rpn.LabelDeclaration(y);
                                                               
                                                               cond.addFirst(beginDest);
                                                               cond.addLast(jumpToEnd);
                                                               cond.addAll(branch);
                                                               cond.addLast(rpn.ControlOperator.JMP);
                                                               cond.addLast(jumpToBegin);
                                                               cond.addLast(endDest);

	                                                           RESULT = cond;
	                                                        :}
	;


statement_list ::=
	statement_list:st1 statement:st2                              {:
	                                                                 st1.addAll(st2);
	                                                                 RESULT = st1;
	                                                              :}
	| statement:st1                                               {: RESULT = st1; :}
	;


function_call ::=
	PLUSTRUNC LPAREN LBRACK argument_list:plustrunc RBRACK RPAREN {: RESULT = plustrunc; :}
	;

argument_list ::=
	argument_list:trunc COMMA TRUNC LPAREN expression:expr RPAREN {:
	                                                                 trunc.addAll(expr);
	                                                                 trunc.add(rpn.UnaryOperator.TRUNC);
	                                                                 trunc.add(rpn.BinaryOperator.PLUS);
	                                                                 RESULT = trunc;
	                                                              :}
	| TRUNC LPAREN expression:expr RPAREN                         {:
	                                                                 expr.add(rpn.UnaryOperator.TRUNC);
	                                                                 RESULT = expr;
	                                                              :}
	;
